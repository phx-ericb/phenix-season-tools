/*******************************
 * Fonction auxiliaire : détermine la catégorie d'âge en fonction de l'année de naissance
 *******************************/
function getAgeCategory(birthYear) {
  var mapping = {
    2021: "U04",
    2020: "U05",
    2019: "U06",
    2018: "U07",
    2017: "U08",
    2016: "U09",
    2015: "U10",
    2014: "U11",
    2013: "U12",
    2012: "U13",
    2011: "U14",
    2010: "U15",
    2009: "U16",
    2008: "U17",
    2007: "U18",
    2006: "U19"
  };
  return mapping[birthYear] || "";
}

/*******************************
 * FONCTION DE GÉNÉRATION DU RAPPORT "Rétro - Groupe Articles" ET EXPORT XLSX
 *******************************/
function genererRetroGroupeArticles() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var articlesSheet = ss.getSheetByName("ARTICLES");
  if (!articlesSheet) {
    SpreadsheetApp.getUi().alert("L'onglet ARTICLES est introuvable.");
    return;
  }
  
  // Lecture des données depuis ARTICLES (colonnes A à J)
  var lastRow = articlesSheet.getLastRow();
  if (lastRow < 2) {
    SpreadsheetApp.getUi().alert("Aucune donnée dans l'onglet ARTICLES.");
    return;
  }
  var dataRange = articlesSheet.getRange(1, 1, lastRow, 10);
  var data = dataRange.getValues();
  
  var output = [];
  
  // Parcourir les lignes (en ignorant l'en-tête)
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    // Ignorer si le statut (colonne J, index 9) est "Annulé"
    if (row[9] && row[9].toString().trim().toLowerCase() === "annulé") continue;
    
    // Extraction des champs de base
    var passeport = row[0];
    var prenom = row[1];
    var nom = row[2];
    var dateNaissance = row[3];
    var genre = row[4] ? row[4].toString().trim().toUpperCase().charAt(0) : "";
    var nomFrais = row[5] ? row[5].toString().trim() : "";
    
    // Détermination de l'année de naissance et de la catégorie d'âge
    var birthYear = "";
    if (dateNaissance instanceof Date) {
      birthYear = dateNaissance.getFullYear();
    } else if (dateNaissance) {
      birthYear = parseInt(dateNaissance.toString().slice(-4), 10);
    }
    var ageCat = getAgeCategory(birthYear);
    
    // Initialisation des variables de groupe et catégorie
    var groupe = "";
    var categorie = "";
    
    // Conversion en minuscules pour comparer
    var lowerFrais = nomFrais.toLowerCase();
    
    if (lowerFrais.indexOf("programme futsal u9-u12 - session printemps") !== -1) {
      // Programme Futsal
      if (ageCat === "U09" || ageCat === "U10") {
        groupe = "Futsal U09-U10" + genre;
      } else if (ageCat === "U11" || ageCat === "U12") {
        groupe = "Futsal U11-U12" + genre;
      }
      categorie = "";
      
    } else if (lowerFrais.indexOf("u4 à u6 (5 activités supplémentaires)") !== -1) {
      // U4 à U6
      groupe = "U04-U06 - 5 séances supplémentaires";
      categorie = "";
      
    } else if (lowerFrais.indexOf("camp de sélection u13-u18") !== -1) {
      // Camp de sélection
      // Ajout de la condition pour inclure les garçons U16
      if (ageCat === "U13" || ageCat === "U14" || ageCat === "U15" || (genre === "M" && ageCat === "U16")) {
        groupe = "Camp " + ageCat + genre;
        categorie = ageCat + " " + genre;
      } else if (genre === "F" && (ageCat === "U16" || ageCat === "U17" || ageCat === "U18")) {
        groupe = "Camp U16-U17-U18F";
        categorie = "U16-U18 F";
      } else if (genre === "M" && (ageCat === "U17" || ageCat === "U18" || ageCat === "U19")) {
        groupe = "Camp U17-U18-U19M";
        categorie = "U17-U19 M";
      } else {
        continue;
      }
      } else if (lowerFrais.indexOf("2 entraînements cdp par semaine") !== -1) {
      // 2 entraînements CDP par semaine pour U9 ? U12
      // Ne traiter que si ageCat est dans U09 à U12
      if (["U09","U10","U11","U12"].indexOf(ageCat) !== -1) {
        groupe    = ageCat + genre + " CDP2";      // ex. "U09M CDP2" ou "U12F CDP2"
        categorie = ageCat + " " + genre;          // ex. "U09 M" ou "U12 F"
      } else {
        // hors de la plage U9–U12, on ignore
        continue;
      }

      
    } else {
      // Pour les autres articles, on ignore la ligne
      continue;
    }
    
    // Construire la ligne de sortie avec 10 colonnes :
    // A: Passeport, B: Nom, C: Prénom, D: Date de naissance, E: vide, F: vide, G: vide, H: vide, I: Groupe, J: Catégorie
    var nbCols = 10;
    var rowOut = new Array(nbCols).fill("");
    rowOut[0] = passeport;
    rowOut[1] = nom;
    rowOut[2] = prenom;
    rowOut[3] = dateNaissance;
    // Les colonnes E, F, G, H restent vides (#, Couleur, Sous-groupe, Position)
    rowOut[8] = groupe;     // Équipe/Groupe
    rowOut[9] = categorie;  // Catégorie
    
    output.push(rowOut);
  }
  
  // Accès à la feuille destination "Rétro - Groupe Articles"
  var destSheet = ss.getSheetByName("Rétro - Groupe Articles");
  if (!destSheet) {
    destSheet = ss.insertSheet("Rétro - Groupe Articles");
  }
  
  // Création de l'en-tête sur la première ligne
  var headerRow = [["Identifiant unique", "Nom", "Prénom", "Date de naissance", "#", "Couleur", "Sous-groupe", "Position", "Équipe/Groupe", "Catégorie"]];
  destSheet.getRange(1, 1, 1, headerRow[0].length).setValues(headerRow);
  
  // Effacer les anciennes données à partir de la ligne 2
  var maxRows = destSheet.getMaxRows();
  var maxCols = destSheet.getMaxColumns();
  if (maxRows > 1) {
    destSheet.getRange(2, 1, maxRows - 1, maxCols).clearContent();
  }
  
  // Écriture des données à partir de la ligne 2 (colonnes A à J)
  if (output.length > 0) {
    destSheet.getRange(2, 1, output.length, nbCols).setValues(output);
    destSheet.autoResizeColumns(1, nbCols);
  }
  
  // Forcer la première colonne (Identifiant unique) en format texte
  var totalRows = output.length > 0 ? output.length + 1 : 1;
  destSheet.getRange(2, 1, totalRows - 1, 1).setNumberFormat("@");
  
  // Activer la feuille "Rétro - Groupe Articles"
  ss.setActiveSheet(destSheet);
  
  SpreadsheetApp.getUi().alert("Le rapport 'Rétro - Groupe Articles' a été généré avec succès.\nNombre d'enregistrements : " + output.length);
  
  // -------------------------------
  // Génération du fichier XLSX
  // -------------------------------
  // Création d'un nouveau spreadsheet temporaire et copie de la feuille d'export
  var tempSpreadsheet = SpreadsheetApp.create("Export temporaire - Retro Groupe Articles");
  var tempSheet = destSheet.copyTo(tempSpreadsheet);
  tempSheet.setName("Export");
  // Suppression des autres feuilles (par défaut, un nouveau spreadsheet contient une feuille vide)
  var sheetsTemp = tempSpreadsheet.getSheets();
  for (var j = 0; j < sheetsTemp.length; j++) {
    if (sheetsTemp[j].getSheetId() !== tempSheet.getSheetId()) {
      tempSpreadsheet.deleteSheet(sheetsTemp[j]);
    }
  }
  
  // Construction de l'URL d'export en format XLSX
  var tempFileId = tempSpreadsheet.getId();
  var url = "https://docs.google.com/spreadsheets/d/" + tempFileId + "/export?format=xlsx";
  var options = {
    headers: {
      "Authorization": "Bearer " + ScriptApp.getOAuthToken()
    }
  };
  var response = UrlFetchApp.fetch(url, options);
  var blob = response.getBlob();
  
  // Formatage de la date et de l'heure pour le nom du fichier (ddMMyyyy_HH:mm)
  var dateNow = new Date();
  var formattedDate = Utilities.formatDate(dateNow, ss.getSpreadsheetTimeZone(), "ddMMyyyy_HH:mm");
  var fileName = "Export_Retro_Groupe_Articles_" + formattedDate + ".xlsx";
  blob.setName(fileName);
  
  // Enregistrement du fichier XLSX dans le dossier de destination spécifié
  var destFolder = DriveApp.getFolderById("13k4TQLG_qJV2YKD_mFA2xCoJV-A5qd3X");
  var xlsxFile = destFolder.createFile(blob);
  
  // Optionnel : Suppression du spreadsheet temporaire
  DriveApp.getFileById(tempFileId).setTrashed(true);
  
  SpreadsheetApp.getUi().alert("Le fichier XLSX a été généré avec succès dans le dossier spécifié.\nFichier : " + xlsxFile.getName());
}
