/*******************************
 * MENU PERSONNALISÉ
 *******************************/


/*******************************
 * RAPPORT D'ACHAT D'ARTICLES DÉTAILLÉ
 *******************************/
function genererRapportArticles() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var articlesSheet = ss.getSheetByName("ARTICLES");
  if (!articlesSheet) {
    SpreadsheetApp.getUi().alert("L’onglet 'ARTICLES' est introuvable.");
    return;
  }
  
  // Vérifier ou créer l’onglet "Rapport Articles"
  var rapportSheet = ss.getSheetByName("Rapport Articles");
  if (!rapportSheet) {
    rapportSheet = ss.insertSheet("Rapport Articles");
  } else {
    rapportSheet.clearContents();
  }
  
  // Lecture de la plage A:J (10 colonnes)
  var lastRow = articlesSheet.getLastRow();
  if (lastRow < 2) {
    rapportSheet.getRange(1, 1).setValue("Aucune donnée à afficher.");
    return;
  }
  var dataRange = articlesSheet.getRange(1, 1, lastRow, 10);
  var data = dataRange.getValues();
  
  // Indices (0-based)
  // D: Date de naissance -> index 3
  // F: Nom du frais (article) -> index 5
  // G: Date de la facture -> index 6
  // J: Statut d'inscription -> index 9
  var INDEX_DATE_NAISSANCE = 3;
  var INDEX_NOM_FRAIS = 5;
  var INDEX_DATE_FACTURE = 6;
  var INDEX_STATUT = 9;
  
  // =============================
  // SECTION 1 : Détail par article, statut et année de naissance
  // =============================
  // Structure : details[article] = { "Validé": { année: count, ... }, "Annulé": { année: count, ... } }
  var details = {};
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    var article = row[INDEX_NOM_FRAIS];
    if (!article) continue;
    
    // Extraction de l'année de naissance
    var dateNaissance = row[INDEX_DATE_NAISSANCE];
    var birthYear = "";
    if (dateNaissance instanceof Date) {
      birthYear = dateNaissance.getFullYear();
    } else if (dateNaissance) {
      var parts = dateNaissance.toString().split(/[-\/]/);
      birthYear = parts[parts.length - 1];
    }
    if (!birthYear) birthYear = "Inconnu";
    
    // Déterminer le statut
    var statutText = row[INDEX_STATUT] ? row[INDEX_STATUT].toString().trim().toLowerCase() : "";
    var statusCategory = (statutText === "annulé") ? "Annulé" : "Validé";
    
    if (!details[article]) {
      details[article] = { "Validé": {}, "Annulé": {} };
    }
    if (!details[article][statusCategory][birthYear]) {
      details[article][statusCategory][birthYear] = 0;
    }
    details[article][statusCategory][birthYear]++;
  }
  
  // =============================
  // SECTION 2 : Historique des transactions par jour (Top 5 articles par jour)
  // =============================
  // Structure : dayGroups[dateStr] = { article: count, ... }
  var dayGroups = {};
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    var dateFacture = row[INDEX_DATE_FACTURE];
    if (!dateFacture) continue;
    var dateStr = "";
    if (dateFacture instanceof Date) {
      dateStr = Utilities.formatDate(dateFacture, ss.getSpreadsheetTimeZone(), "yyyy-MM-dd");
    } else {
      dateStr = dateFacture.toString();
    }
    var article = row[INDEX_NOM_FRAIS];
    if (!article) continue;
    // On compte toutes les transactions (qu'elles soient annulées ou non)
    if (!dayGroups[dateStr]) {
      dayGroups[dateStr] = {};
    }
    dayGroups[dateStr][article] = (dayGroups[dateStr][article] || 0) + 1;
  }
  
  // =============================
  // SECTION 3 : Totaux par article (Validé vs Annulé)
  // =============================
  // Structure : totals[article] = { valid: count, annule: count }
  var totals = {};
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    var article = row[INDEX_NOM_FRAIS];
    if (!article) continue;
    var statutText = row[INDEX_STATUT] ? row[INDEX_STATUT].toString().trim().toLowerCase() : "";
    var statusCategory = (statutText === "annulé") ? "annule" : "valid";
    if (!totals[article]) {
      totals[article] = { valid: 0, annule: 0 };
    }
    totals[article][statusCategory]++;
  }
  
  // Calcul du total global d'articles (toutes catégories confondues)
  var globalTotal = 0;
  for (var article in totals) {
    globalTotal += (totals[article].valid + totals[article].annule);
  }
  
  // =============================
  // Construction de l'output global
  // =============================
  var output = [];
  var now = new Date();
  var formattedDate = Utilities.formatDate(now, ss.getSpreadsheetTimeZone(), "dd/MM/yyyy HH:mm");
  
  // En-tête du rapport
  output.push(["Rapport d'achat d'articles détaillé"]);
  output.push(["Généré le: " + formattedDate]);
  output.push([""]); // Ligne vide
  
  // ---------- Section 1 ----------
  output.push(["Section 1 : Détail par article, statut et année de naissance"]);
  output.push(["Article", "Statut", "Année de naissance", "Nombre d'articles"]);
  var articlesList = Object.keys(details).sort();
  for (var j = 0; j < articlesList.length; j++) {
    var article = articlesList[j];
    // Pour le statut Validé
    var validData = details[article]["Validé"];
    var validYears = Object.keys(validData).sort(function(a, b) {
      var ai = parseInt(a), bi = parseInt(b);
      if (isNaN(ai) || isNaN(bi)) return a.localeCompare(b);
      return ai - bi;
    });
    for (var k = 0; k < validYears.length; k++) {
      var year = validYears[k];
      var count = validData[year];
      output.push([article, "Validé", year, count]);
    }
    // Pour le statut Annulé
    var annuleData = details[article]["Annulé"];
    var annuleYears = Object.keys(annuleData).sort(function(a, b) {
      var ai = parseInt(a), bi = parseInt(b);
      if (isNaN(ai) || isNaN(bi)) return a.localeCompare(b);
      return ai - bi;
    });
    for (var k = 0; k < annuleYears.length; k++) {
      var year = annuleYears[k];
      var count = annuleData[year];
      output.push([article, "Annulé", year, count]);
    }
  }
  output.push([""]); // Ligne vide
  
  // ---------- Section 2 ----------
  output.push(["Section 2 : Historique des transactions par jour (Top 5 articles par jour)"]);
  output.push(["Date", "Article", "Nombre", "% du total du jour"]);
  // Pour chaque jour, trier les articles par nombre décroissant et prendre les 5 premiers
  var dayDates = Object.keys(dayGroups).sort();
  for (var d = 0; d < dayDates.length; d++) {
    var dateStr = dayDates[d];
    var articlesForDay = dayGroups[dateStr];
    var dayTotal = 0;
    for (var art in articlesForDay) {
      dayTotal += articlesForDay[art];
    }
    // Convertir en tableau et trier
    var dayArray = [];
    for (var art in articlesForDay) {
      dayArray.push({ article: art, count: articlesForDay[art] });
    }
    dayArray.sort(function(a, b) { return b.count - a.count; });
    // Prendre jusqu'à 5 articles
    var topArticles = dayArray.slice(0, 5);
    for (var t = 0; t < topArticles.length; t++) {
      var item = topArticles[t];
      var percentDay = ((item.count / dayTotal) * 100).toFixed(2) + "%";
      output.push([dateStr, item.article, item.count, percentDay]);
    }
  }
  output.push([""]); // Ligne vide
  
  // ---------- Section 3 ----------
  output.push(["Section 3 : Totaux par article (Validé vs Annulé)"]);
  output.push(["Article", "Validé", "Annulé", "Total", "% Annulé"]);
  var articlesTotaux = Object.keys(totals).sort();
  for (var i in articlesTotaux) {
    var article = articlesTotaux[i];
    var validCount = totals[article].valid;
    var annuleCount = totals[article].annule;
    var totalArticle = validCount + annuleCount;
    var percentAnnule = (totalArticle > 0) ? ((annuleCount / totalArticle) * 100).toFixed(2) + "%" : "0%";
    output.push([article, validCount, annuleCount, totalArticle, percentAnnule]);
  }
  
  // Uniformiser le nombre de colonnes sur toutes les lignes
  var maxCols = 0;
  for (var i = 0; i < output.length; i++) {
    if (output[i].length > maxCols) {
      maxCols = output[i].length;
    }
  }
  for (var i = 0; i < output.length; i++) {
    while (output[i].length < maxCols) {
      output[i].push("");
    }
  }
  
  // Écriture du rapport dans l'onglet "Rapport Articles" à partir de la cellule A1
  rapportSheet.getRange(1, 1, output.length, maxCols).setValues(output);
  rapportSheet.autoResizeColumns(1, maxCols);
  
  SpreadsheetApp.getUi().alert("Le rapport d'achat d'articles détaillé a été généré avec succès !");
}
