/*******************************
 * FONCTION DE GÉNÉRATION DU RAPPORT "Rétro - Membres" ET LOG DES NOUVELLES INSCRIPTIONS U9-U12M
 *******************************/
function genererRetroMembres() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Accès aux onglets sources
  var inscriptionsSheet = ss.getSheetByName("Inscriptions");
  var articlesSheet = ss.getSheetByName("ARTICLES");
  if (!inscriptionsSheet || !articlesSheet) {
    SpreadsheetApp.getUi().alert("Vérifiez que les onglets 'Inscriptions' et 'ARTICLES' existent.");
    return;
  }
  
  // Obtenir les données
  var dataInsc = inscriptionsSheet.getDataRange().getValues(); // INSCRIPTIONS (A:Z)
  var dataArt = articlesSheet.getDataRange().getValues();       // ARTICLES
  
  // Création de l'objet members (clé = passeport)
  var members = {}; 
  
  // --- Traitement de l'onglet INSCRIPTIONS ---
  if (dataInsc.length > 1) {
    for (var i = 1; i < dataInsc.length; i++) {
      var row = dataInsc[i];
      // Ignorer les inscriptions annulées (colonne W, index 22)
      if (row[22] && row[22].toString().trim().toLowerCase() === "annulé") continue;
      
      var passeport = row[0];
      if (!passeport) continue;
      
      // Exclure les inscriptions dont le nom de frais (colonne L, index 11) contient "senior", "adulte" ou "ligue"
      var nomFraisInsc = row[11] ? row[11].toString().trim() : "";
      // Exclure les inscriptions dont le nom de frais contient "senior", "U-SÉ", "adulte" ou "ligue"
      if (nomFraisInsc && (nomFraisInsc.toLowerCase().indexOf("senior") !== -1 ||
                          nomFraisInsc.toLowerCase().indexOf("u-sé") !== -1 ||
                          nomFraisInsc.toLowerCase().indexOf("adulte") !== -1)) {
        continue;
      }

      var key = passeport.toString().trim();
      // Récupération de la date de facture (colonne Z, index 25)
      var factureDate = row[25] || "";
      
      if (!members[key]) {
        members[key] = {
          passeport: passeport,
          nom: row[1] || "",
          prenom: row[2] || "",
          dateNaissance: row[3] || "",
          genre: row[5] ? row[5].toString().trim().toUpperCase().charAt(0) : "",
          emails: [],
          inscription: true,  // Issu de l'onglet INSCRIPTIONS
          facture: factureDate
        };
      } else {
        if (!members[key].nom && row[1]) members[key].nom = row[1];
        if (!members[key].prenom && row[2]) members[key].prenom = row[2];
        if (!members[key].dateNaissance && row[3]) members[key].dateNaissance = row[3];
        if (!members[key].genre && row[5]) members[key].genre = row[5].toString().trim().toUpperCase().charAt(0);
        if (!members[key].facture && factureDate) members[key].facture = factureDate;
      }
      [6, 7, 9].forEach(function(idx) {
        var email = row[idx];
        if (email && email.toString().trim() !== "") {
          if (members[key].emails.indexOf(email.toString().trim()) === -1) {
            members[key].emails.push(email.toString().trim());
          }
        }
      });
      // Vérification pour "Adapté" dans l'onglet Inscriptions (colonne L, index 11)
      if (nomFraisInsc.toLowerCase().indexOf("adapté") !== -1) {
        members[key].adapte = 1;
      }
    }
  }
  
  // --- Traitement de l'onglet ARTICLES ---
  if (dataArt.length > 1) {
    for (var i = 1; i < dataArt.length; i++) {
      var row = dataArt[i];
      // Ignorer les articles annulés (colonne J, index 9)
      if (row[9] && row[9].toString().trim().toLowerCase() === "annulé") continue;
      
     var passeport = row[0];
      if (!passeport) continue;
      var key = passeport.toString().trim();
      if (!members[key]) {
        members[key] = {
          passeport: passeport,
          nom: row[2] || "",
          prenom: row[1] || "",
          dateNaissance: row[3] || "",
          genre: row[4] ? row[4].toString().trim().toUpperCase().charAt(0) : "",
          emails: [],
          inscription: false  // Provenant uniquement de l'onglet ARTICLES
        };
      } else {
        if (!members[key].nom && row[2]) members[key].nom = row[2];
        if (!members[key].prenom && row[1]) members[key].prenom = row[1];
        if (!members[key].dateNaissance && row[3]) members[key].dateNaissance = row[3];
        if (!members[key].genre && row[4]) members[key].genre = row[4].toString().trim().toUpperCase().charAt(0);
      }
      // Gestion pour CDP et Camp via le "Nom du frais" (colonne F, index 5)
      var nomFraisArt = row[5] ? row[5].toString().trim() : "";
      if (nomFraisArt.indexOf("1 entraînement CDP par semaine") !== -1) {
        members[key].cdp = 1;
      } else if (nomFraisArt.indexOf("2 entraînements CDP par semaine") !== -1) {
        members[key].cdp = 2;
      }
      if (nomFraisArt.toLowerCase().indexOf("camp de sélection u13") !== -1) {
        members[key].camp = "Oui";
      }
    }
  }
  
  // --- Traitement de l'onglet Mutation ---
  var mutatedPassports = {};
  var mutationSheet = ss.getSheetByName("Mutation");
  if (mutationSheet) {
    var mutationData = mutationSheet.getDataRange().getValues();
    for (var i = 1; i < mutationData.length; i++) {
      var pass = mutationData[i][0];
      if (pass) {
        mutatedPassports[pass.toString().trim()] = true;
      }
    }
  }
  
  // --- Construction de l'output pour "Rétro - Membres" ---
  var nbCols = 46;
  var headerRow = [[
    "Identifiant unique", "Code", "Nom", "Prénom", "Date de naissance", 
    "Genre(M pour Masculin ou F pour Féminin)", "Langue", "Courriels", "Adresse", "Ville",
    "Code Postal", "Domicile Téléphone", "Mobile Téléphone", "Travail Téléphone",
    "Parent 1 Nom", "Parent 1 Courriels", "Parent 1 Domicile Téléphone", "Parent 1 Mobile Téléphone", "Parent 1 Travail Téléphone",
    "Parent 2 Nom", "Parent 2 Courriels", "Parent 2 Domicile Téléphone", "Parent 2 Mobile Téléphone", "Parent 2 Travail Téléphonique",
    "Autre Nom", "Autre Courriels", "Autre Domicile Téléphone", "Autre Mobile Téléphone", "Autre Travail Téléphonique",
    "Position", "Établissement scolaire", "Fiche d'employé", "Specimen Chèque", "Filtration Policière", "Respect et Sport",
    "S3", "S7", "Théorie A+B", "Diplôme C", "Adapté", "CDP", "Euroclass", "Camp", "Muté", "École", "InscritE25"
  ]];
  

  // Assurer que tous les U9-U12 ont une valeur de CDP par défaut (0 si non défini)
// Assurer que tous les U9-U12 ont une valeur de CDP par défaut (0 si non défini)
// sauf pour les membres en soccer adapté
for (var key in members) {
  var m = members[key];
  var birthYear = 0;
  var currentYear = new Date().getFullYear();
  
  if (m.dateNaissance instanceof Date) {
    birthYear = m.dateNaissance.getFullYear();
  } else if (m.dateNaissance) {
    birthYear = parseInt(m.dateNaissance.toString().slice(-4), 10);
  }

  var age = currentYear - birthYear;
  
  if (age >= 9 && age <= 12 && typeof m.adapte === 'undefined') {
    if (typeof m.cdp === 'undefined') {
      m.cdp = 0;
    }
  }
}



  var outputData = [];
  for (var key in members) {
    var m = members[key];
    var rowOut = new Array(nbCols).fill("");
    rowOut[0] = m.passeport;
    // Pour les membres issus d'INSCRIPTIONS, les champs Nom/Prénom sont inversés
    if (m.inscription) {
      rowOut[2] = m.prenom;
      rowOut[3] = m.nom;
    } else {
      rowOut[2] = m.nom;
      rowOut[3] = m.prenom;
    }
    rowOut[4] = m.dateNaissance;
    rowOut[5] = m.genre;
    if (m.emails && m.emails.length > 0) {
      rowOut[7] = m.emails.join("; ");
    }
    // Affectation des valeurs Adapté, CDP et Camp : laisser vide si non définis
    rowOut[39] = (typeof m.adapte !== 'undefined' ? m.adapte : "");
    rowOut[40] = (typeof m.cdp !== 'undefined' ? m.cdp : "");
    rowOut[42] = (typeof m.camp !== 'undefined' ? m.camp : "");
    // Mutation
    rowOut[43] = (mutatedPassports[m.passeport.toString().trim()] ? "Oui" : "Non");
    
    outputData.push(rowOut);
  }
  
  var membresSheet = ss.getSheetByName("Rétro - Membres");
  if (!membresSheet) {
    membresSheet = ss.insertSheet("Rétro - Membres");
  } else {
    var maxRows = membresSheet.getMaxRows();
    var maxColsSheet = membresSheet.getMaxColumns();
    if (maxRows > 1) {
      membresSheet.getRange(2, 1, maxRows - 1, maxColsSheet).clearContent();
    }
  }
  
  membresSheet.getRange(1, 1, 1, headerRow[0].length).setValues(headerRow);
  if (outputData.length > 0) {
    membresSheet.getRange(2, 1, outputData.length, nbCols).setValues(outputData);
    membresSheet.autoResizeColumns(1, nbCols);
  }
  
  var totalRows = outputData.length > 0 ? outputData.length + 1 : 1;
  membresSheet.getRange(2, 1, totalRows - 1, 1).setNumberFormat("@");
  
  ss.setActiveSheet(membresSheet);
  
  SpreadsheetApp.getUi().alert("Le rapport 'Rétro - Tous les membres' a été généré avec succès.\nNombre de membres uniques : " + outputData.length);
  
  // -------------------------------
  // Génération du fichier XLSX pour "Rétro - Membres"
  // -------------------------------
  var tempSpreadsheet = SpreadsheetApp.create("Export temporaire - Retro Membres");
  var tempSheet = membresSheet.copyTo(tempSpreadsheet);
  tempSheet.setName("Export");
  var sheetsTemp = tempSpreadsheet.getSheets();
  for (var j = 0; j < sheetsTemp.length; j++) {
    if (sheetsTemp[j].getSheetId() !== tempSheet.getSheetId()) {
      tempSpreadsheet.deleteSheet(sheetsTemp[j]);
    }
  }
  
  var tempFileId = tempSpreadsheet.getId();
  var url = "https://docs.google.com/spreadsheets/d/" + tempFileId + "/export?format=xlsx";
  var options = {
    headers: {
      "Authorization": "Bearer " + ScriptApp.getOAuthToken()
    }
  };
  var response = UrlFetchApp.fetch(url, options);
  var blob = response.getBlob();
  
  var dateNow = new Date();
  var formattedDate = Utilities.formatDate(dateNow, ss.getSpreadsheetTimeZone(), "dd-MM-yyyy-HHmm");
  var fileName = "Export_Retro_Membres_" + formattedDate + ".xlsx";
  blob.setName(fileName);
  
  var destFolder = DriveApp.getFolderById("13k4TQLG_qJV2YKD_mFA2xCoJV-A5qd3X");
  var xlsxFile = destFolder.createFile(blob);
  
  DriveApp.getFileById(tempFileId).setTrashed(true);
  
  SpreadsheetApp.getUi().alert("Le fichier XLSX a été généré avec succès dans le dossier spécifié.\nFichier : " + xlsxFile.getName());
  
// -------------------------------
// Configuration des tranches à traiter
// -------------------------------
var logsConfig = {
  "U9-U12": {
    sheetName:   "Suivi U9-U12",
    ages:        [9,10,11,12],
    genres:      ["M","F"],
    recipients:  ["cdp@phenixdesrivieres.com","dt@phenixdesrivieres.com"]
  },
  "U4-U8": {
    sheetName:   "Suivi U4-U8",
    ages:        [4,5,6,7,8],
    genres:      ["M","F"],
    recipients:  ["cipu4u6@phenixdesrivieres.com","cipu7u8@phenixdesrivieres.com","dt@phenixdesrivieres.com"]
  },
  "U13-U18": {
    sheetName:   "Suivi U13-U18",
    ages:        [13,14,15,16,17,18],
    genres:      ["M","F"],
    recipients:  ["cdj@phenixdesrivieres.com","dt@phenixdesrivieres.com"]
  }
};

// -------------------------------
// Boucle sur chaque config
// -------------------------------
var ss = SpreadsheetApp.getActiveSpreadsheet();
var currentYear = new Date().getFullYear();
var generationDate = Utilities.formatDate(new Date(), ss.getSpreadsheetTimeZone(), "dd-MM-yyyy HH:mm");

Object.keys(logsConfig).forEach(function(key) {
  var cfg          = logsConfig[key];
  var suiviSheet   = ss.getSheetByName(cfg.sheetName);
  var headerLog    = [["Passeport","Nom","Prénom","Date de naissance","Catégorie","Date de facture","Date de génération"]];
  var loggedPass   = {};
  var newEntries   = [];

  // Création ou récupération de la feuille
  if (!suiviSheet) {
    suiviSheet = ss.insertSheet(cfg.sheetName);
    suiviSheet.getRange(1,1,1,headerLog[0].length).setValues(headerLog);
  }

  // Récupération des passeports déjà loggués
  var logData = suiviSheet.getDataRange().getValues();
  if (logData.length > 1) {
    for (var i=1; i<logData.length; i++) {
      var p = logData[i][0].toString().trim();
      if (p) loggedPass[p] = true;
    }
  }
  var isFirstLog = (logData.length <= 1);

  // Parcours de vos membres (supposé : objet `members` défini plus haut)
  for (var keyM in members) {
    var m = members[keyM];
    if (!m.inscription) continue;

// Exclure les inscriptions en soccer adapté
   if (m.adapte) continue;

    // Genre
    var g = m.genre ? m.genre.toUpperCase().charAt(0) : "";
    if (cfg.genres.indexOf(g) === -1) continue;

    // Calcul de l'âge
    var by = (m.dateNaissance instanceof Date)
      ? m.dateNaissance.getFullYear()
      : parseInt(String(m.dateNaissance).slice(-4),10);
    var age = currentYear - by;
    if (cfg.ages.indexOf(age) === -1) continue;

    // Nouvelle inscription ?
    if (isFirstLog || !loggedPass[keyM]) {
      var cat = "U" + age + " " + g;
      newEntries.push([
        m.passeport, m.nom, m.prenom,
        m.dateNaissance, cat,
        m.facture, generationDate
      ]);
    }
  }

  // Écriture dans la feuille de suivi
  if (newEntries.length) {
    var startRow = suiviSheet.getLastRow() < 2 ? 2 : suiviSheet.getLastRow()+1;
    suiviSheet
      .getRange(startRow,1,newEntries.length,newEntries[0].length)
      .setValues(newEntries);
    suiviSheet.getRange(2,1,suiviSheet.getLastRow()-1,1).setNumberFormat("@");
  }

  // Envoi du mail si nécessaire
  if (newEntries.length) {
    // Création temporaire et export XLSX
    var tempSS = SpreadsheetApp.create("Export_Log_" + cfg.sheetName);
    var tmp    = tempSS.getSheets()[0];
    tmp.getRange("A:A").setNumberFormat("@");
    tmp.getRange(1,1,headerLog.length,headerLog[0].length).setValues(headerLog);
    tmp.getRange(2,1,newEntries.length,newEntries[0].length).setValues(newEntries);
    tmp.autoResizeColumns(1,headerLog[0].length);
    SpreadsheetApp.flush();

    var url = "https://docs.google.com/spreadsheets/d/" + tempSS.getId() + "/export?format=xlsx";
    var blob = UrlFetchApp.fetch(url, {
      headers: { "Authorization": "Bearer " + ScriptApp.getOAuthToken() }
    }).getBlob().setName("Export_" + cfg.sheetName + ".xlsx");

    MailApp.sendEmail({
      to:         cfg.recipients.join(","),
      subject:    "Nouvelles inscriptions " + key,
      body:       "Veuillez trouver en pièce jointe les nouvelles inscriptions pour " + key + ".",
      attachments:[ blob ]
    });

    DriveApp.getFileById(tempSS.getId()).setTrashed(true);
}
});
}
