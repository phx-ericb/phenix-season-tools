function miseAJourAnnulations() {
  // Fonction utilitaire pour formater une date au format court (yyyy-MM-dd)
  function formatDateShort(dateValue) {
    if (dateValue instanceof Date) {
      return Utilities.formatDate(dateValue, Session.getScriptTimeZone(), "yyyy-MM-dd");
    }
    return dateValue;
  }

  // Récupération du classeur et des feuilles concernées
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var articlesSheet = ss.getSheetByName("ARTICLES");
  var inscriptionsSheet = ss.getSheetByName("inscriptions");
  var articlesAnnulesSheet = ss.getSheetByName("ARTICLES_ANNULÉS");
  var inscriptionsAnnulesSheet = ss.getSheetByName("INSCRIPTIONS_ANNULÉES");
  
  // Effacer les anciennes données (en conservant l'en-tête) dans les onglets cibles
  if (articlesAnnulesSheet.getLastRow() > 1) {
    articlesAnnulesSheet.getRange(2, 1, articlesAnnulesSheet.getLastRow()-1, articlesAnnulesSheet.getLastColumn()).clearContent();
  }
  if (inscriptionsAnnulesSheet.getLastRow() > 1) {
    inscriptionsAnnulesSheet.getRange(2, 1, inscriptionsAnnulesSheet.getLastRow()-1, inscriptionsAnnulesSheet.getLastColumn()).clearContent();
  }
  
  // Définir la colonne A (ID) en texte pour toute la feuille
  articlesAnnulesSheet.getRange(1, 1, articlesAnnulesSheet.getMaxRows(), 1).setNumberFormat("@");
  inscriptionsAnnulesSheet.getRange(1, 1, inscriptionsAnnulesSheet.getMaxRows(), 1).setNumberFormat("@");
  
  // Récupérer toutes les données (première ligne = en-tête)
  var articlesData = articlesSheet.getDataRange().getValues();
  var inscriptionsData = inscriptionsSheet.getDataRange().getValues();
  
  // Objets pour stocker les annulations regroupées par passeport
  var articlesCancellations = {};    // Pour ARTICLES annulés
  var inscriptionsCancellations = {}; // Pour INSCRIPTIONS annulées
  
  // --- Traitement des annulations dans ARTICLES ---
  // Colonnes ARTICLES : 
  // A: Passeport (0), B: Prénom (1), C: Nom (2), D: Date de naissance (3),
  // F: Nom du frais (5), I: Date d'annulation (8), J: Statut (9)
  for (var i = 1; i < articlesData.length; i++) {
    var row = articlesData[i];
    var passport = row[0];
    var prenom = row[1];
    var nom = row[2];
    var dob = row[3]; // Date de naissance
    var fee = row[5];
    var dateAnnulation = formatDateShort(row[8]);
    var statut = row[9];
    
    if (statut === "Annulé") {
      if (!articlesCancellations[passport]) {
        articlesCancellations[passport] = {
          id: passport,
          prenom: prenom,
          nom: nom,
          dob: dob,
          fees: [fee],
          cancellationDates: [dateAnnulation],
          activeFees: ""
        };
      } else {
        if (articlesCancellations[passport].fees.indexOf(fee) === -1) {
          articlesCancellations[passport].fees.push(fee);
        }
        if (articlesCancellations[passport].cancellationDates.indexOf(dateAnnulation) === -1) {
          articlesCancellations[passport].cancellationDates.push(dateAnnulation);
        }
        // Conserver la date de naissance (si non définie, on la renseigne)
        if (!articlesCancellations[passport].dob && dob) {
          articlesCancellations[passport].dob = dob;
        }
      }
    }
  }
  
  // --- Traitement des annulations dans inscriptions ---
  // Colonnes inscriptions :
  // A: Passeport (0), B: Prénom (1), C: Nom (2), D: Date de naissance (3),
  // L: Nom du frais (11), V: Date d'annulation (21), W: Statut (22)
  for (var j = 1; j < inscriptionsData.length; j++) {
    var row = inscriptionsData[j];
    var passport = row[0];
    var prenom = row[1];
    var nom = row[2];
    var dob = row[3];
    var fee = row[11];
    var dateAnnulation = formatDateShort(row[21]);
    var statut = row[22];
    
    if (statut === "Annulé") {
      if (!inscriptionsCancellations[passport]) {
        inscriptionsCancellations[passport] = {
          id: passport,
          prenom: prenom,
          nom: nom,
          dob: dob,
          fees: [fee],
          cancellationDates: [dateAnnulation],
          activeFees: ""
        };
      } else {
        if (inscriptionsCancellations[passport].fees.indexOf(fee) === -1) {
          inscriptionsCancellations[passport].fees.push(fee);
        }
        if (inscriptionsCancellations[passport].cancellationDates.indexOf(dateAnnulation) === -1) {
          inscriptionsCancellations[passport].cancellationDates.push(dateAnnulation);
        }
        if (!inscriptionsCancellations[passport].dob && dob) {
          inscriptionsCancellations[passport].dob = dob;
        }
      }
    }
  }
  
  // --- Recherche des articles actifs dans ARTICLES ---
  for (var passport in articlesCancellations) {
    var activeArticles = [];
    for (var i = 1; i < articlesData.length; i++) {
      var row = articlesData[i];
      if (row[0] == passport && row[9] !== "Annulé") {
        var fee = row[5];
        if (activeArticles.indexOf(fee) === -1) {
          activeArticles.push(fee);
        }
      }
    }
    articlesCancellations[passport].activeFees = activeArticles.join(" ET ");
  }
  
  // --- Recherche des inscriptions actives dans inscriptions ---
  for (var passport in inscriptionsCancellations) {
    var activeInscriptions = [];
    for (var j = 1; j < inscriptionsData.length; j++) {
      var row = inscriptionsData[j];
      if (row[0] == passport && row[22] !== "Annulé") {
        var fee = row[11];
        if (activeInscriptions.indexOf(fee) === -1) {
          activeInscriptions.push(fee);
        }
      }
    }
    inscriptionsCancellations[passport].activeFees = activeInscriptions.join(" ET ");
  }
  
  // --- Préparation des données pour ARTICLES_ANNULÉS ---
  // Colonnes : 
  // A: ID, B: Prénom, C: Nom, D: Date de naissance, E: Article annulé,
  // F: Date d'annulation article, G: Article actif
  var articlesOutput = [];
  for (var passport in articlesCancellations) {
    var record = articlesCancellations[passport];
    var dobFormatted = formatDateShort(record.dob);
    articlesOutput.push([
      record.id,
      record.prenom,
      record.nom,
      dobFormatted,
      record.fees.join(" ET "),
      record.cancellationDates.join(" ET "),
      record.activeFees
    ]);
  }
  
  // --- Préparation des données pour INSCRIPTIONS_ANNULÉES ---
  // Colonnes :
  // A: ID, B: Prénom, C: Nom, D: Date de naissance, E: Inscription annulée,
  // F: Date d'annulation inscription, G: Inscription active
  var inscriptionsOutput = [];
  for (var passport in inscriptionsCancellations) {
    var record = inscriptionsCancellations[passport];
    var dobFormatted = formatDateShort(record.dob);
    inscriptionsOutput.push([
      record.id,
      record.prenom,
      record.nom,
      dobFormatted,
      record.fees.join(" ET "),
      record.cancellationDates.join(" ET "),
      record.activeFees
    ]);
  }
  
  // Écriture des données dans ARTICLES_ANNULÉS (à partir de la ligne 2)
  if (articlesOutput.length > 0) {
    articlesAnnulesSheet.getRange(2, 1, articlesOutput.length, articlesOutput[0].length)
      .setValues(articlesOutput);
  }
  
  // Écriture des données dans INSCRIPTIONS_ANNULÉES (à partir de la ligne 2)
  if (inscriptionsOutput.length > 0) {
    inscriptionsAnnulesSheet.getRange(2, 1, inscriptionsOutput.length, inscriptionsOutput[0].length)
      .setValues(inscriptionsOutput);
  }
}
